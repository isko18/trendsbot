import asyncio
import sqlite3
from datetime import datetime, timedelta
from functools import wraps

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    Message, CallbackQuery, BotCommand, ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, PAY_TOKEN
from deep_translator import GoogleTranslator
from trends.amazon import get_amazon_trends
from trends.shein import get_shein_trends
from trends.trend1688 import get_1688_categories, get_1688_trends_by_category
from trends.pinterest import get_pinterest_trends
from trends.wordstat import get_wordstat_count

# === FSM ===
class PromoInput(StatesGroup):
    waiting_for_code = State()

class WordstatFSM(StatesGroup):
    waiting_for_phrase = State()


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

DB_NAME = "denushki.db"
SEEN_PRODUCTS_DB = "seen_products.db"
PROMO_DB = "promos.db"
ADMIN_ID = {5268023094, 1230525163}

# === –ë–î ===

# wordstat_limit.py
import sqlite3
from datetime import datetime

def init_wordstat_limit_db():
    with sqlite3.connect("wordstat_limit.db") as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            user_id INTEGER,
            date TEXT,
            count INTEGER,
            PRIMARY KEY (user_id, date)
        )
        """)

def check_wordstat_limit(user_id: int) -> bool:
    if user_id in ADMIN_ID:
        return True 
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect("wordstat_limit.db") as conn:
        cur = conn.cursor()
        row = cur.execute("SELECT count FROM requests WHERE user_id = ? AND date = ?", (user_id, today)).fetchone()

        if row and row[0] >= 5:
            return False
        elif row:
            cur.execute("UPDATE requests SET count = count + 1 WHERE user_id = ? AND date = ?", (user_id, today))
        else:
            cur.execute("INSERT INTO requests (user_id, date, count) VALUES (?, ?, 1)", (user_id, today))

        conn.commit()
        return True

def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            end_date TEXT
        )""")

def init_seen_products_db():
    with sqlite3.connect(SEEN_PRODUCTS_DB) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS seen_products (
            user_id INTEGER,
            product_link TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, product_link)
        )""")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS user_clicks (
            user_id INTEGER,
            platform TEXT,
            PRIMARY KEY (user_id, platform)
        )""")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS promo_clicks (
            user_id INTEGER,
            platform TEXT,
            click_date TEXT,
            clicks INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, platform, click_date)
        )""")

def init_promo_db():
    with sqlite3.connect(PROMO_DB) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            max_uses INTEGER DEFAULT 100,
            used_count INTEGER DEFAULT 0
        )""")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS promo_uses (
            user_id INTEGER,
            code TEXT,
            PRIMARY KEY (user_id, code)
        )""")


# === –õ–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ ===
# def check_promo_click_limit(user_id: int, platform: str) -> bool:
#     if user_id in ADMIN_ID:
#         return True 
#     today = datetime.now().strftime("%Y-%m-%d")
#     with sqlite3.connect(SEEN_PRODUCTS_DB) as conn:
#         cur = conn.cursor()
#         row = cur.execute("""
#             SELECT clicks FROM promo_clicks
#             WHERE user_id = ? AND platform = ? AND click_date = ?
#         """, (user_id, platform, today)).fetchone()
#         if row and row[0] >= 3:
#             return False  # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
#         if row:
#             cur.execute("""
#                 UPDATE promo_clicks SET clicks = clicks + 1
#                 WHERE user_id = ? AND platform = ? AND click_date = ?
#             """, (user_id, platform, today))
#         else:
#             cur.execute("""
#                 INSERT INTO promo_clicks (user_id, platform, click_date, clicks)
#                 VALUES (?, ?, ?, 1)
#             """, (user_id, platform, today))
#         conn.commit()
#     return True
# === –ü–æ–¥–ø–∏—Å–∫–∞ ===
def save_user_subscription(user_id: int, username: str, days: int):
    now = datetime.now()
    end_date = max(get_user_subscription_end(user_id) or now, now) + timedelta(days=days)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
        INSERT INTO subscriptions (user_id, username, end_date)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET end_date = excluded.end_date
        """, (user_id, username, end_date.strftime("%Y-%m-%d %H:%M:%S")))
        print(f"[OK] –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id} –¥–æ {end_date}")  # ‚Üê –ª–æ–≥

async def remind_expiring_subscriptions():
    while True:
        now = datetime.now()
        tomorrow = (now + timedelta(days=1)).strftime("%Y-%m-%d")

        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            rows = cursor.execute("""
                SELECT user_id, username, end_date FROM subscriptions
            """).fetchall()

            for user_id, username, end_date in rows:
                try:
                    end_dt = datetime.strptime(end_date, "%Y-%m-%d %H:%M:%S")
                    if end_dt.date() == (now + timedelta(days=1)).date():
                        kb = InlineKeyboardBuilder()
                        kb.button(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="open_buy_menu")
                        await bot.send_message(
                            user_id,
                            f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è <b>–∑–∞–≤—Ç—Ä–∞ ({end_dt.strftime('%Y-%m-%d')})</b>.\n"
                            "–ü—Ä–æ–¥–ª–∏—Ç–µ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º üëá",
                            parse_mode="HTML",
                            reply_markup=kb.as_markup()
                        )
                except Exception as e:
                    print(f"[ERROR] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_id} ‚Äî {e}")

        await asyncio.sleep(3600 * 12)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

def get_user_subscription_end(user_id: int):
    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,)).fetchone()
        print(f"[DEBUG] row for {user_id}:", row)
        return datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") if row else None

def is_premium_active(user_id: int):
    if user_id in ADMIN_ID:
        return True
    end = get_user_subscription_end(user_id)
    return end and end > datetime.now()

# === –ü—Ä–æ–º–æ–∫–æ–¥ ===
@dp.callback_query(lambda c: c.data == "enter_promo")
async def ask_promo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(PromoInput.waiting_for_code)
    await callback.answer()

@dp.message(PromoInput.waiting_for_code)
async def handle_promo_input(message: Message, state: FSMContext):
    code = message.text.strip()
    user_id = message.from_user.id

    with sqlite3.connect(PROMO_DB) as conn:
        cur = conn.cursor()
        promo = cur.execute(
            "SELECT max_uses, used_count FROM promo_codes WHERE code = ?", (code,)
        ).fetchone()

        if not promo:
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n"
                "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML"
            )
            await state.clear()
            return

        if promo[1] >= promo[0]:
            await message.answer(
                "üòî <b>–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.</b>\n"
                "–û–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.",
                parse_mode="HTML"
            )
            await state.clear()
            return

        if cur.execute(
            "SELECT 1 FROM promo_uses WHERE user_id = ? AND code = ?", (user_id, code)
        ).fetchone():
            await message.answer(
                "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.</b>",
                parse_mode="HTML"
            )
            await state.clear()
            return

        # ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        save_user_subscription(user_id, message.from_user.username or "", 3)
        cur.execute("INSERT INTO promo_uses (user_id, code) VALUES (?, ?)", (user_id, code))
        cur.execute("UPDATE promo_codes SET used_count = used_count + 1 WHERE code = ?", (code,))
        conn.commit()

        # üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üõç Amazon ü¶Ö"), KeyboardButton(text="üëó Shein ‚ú®")],
                [KeyboardButton(text="üì¶ 1688 üêâ"), KeyboardButton(text="üìå Pinterest üí°")],
                [KeyboardButton(text="üîç Wordstat üìä")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>3 –¥–Ω—è –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞</b> –∫ —Ç—Ä–µ–Ω–¥–∞–º.\n"
            "–í—ã–±–∏—Ä–∞–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ üëá",
            parse_mode="HTML",
            reply_markup=kb
        )

    await state.clear()

@dp.message(lambda msg: msg.text == "/privacy")
async def show_privacy(msg: Message):
    await msg.answer(
        "<b>üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        "–ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±—è–∑—É–µ–º—Å—è –∑–∞—â–∏—â–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "<b>–°–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        "‚Ä¢ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram (user_id)\n"
        "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ (–¥–∞—Ç–∞, —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏)\n\n"
        "<b>–¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
        "‚Ä¢ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º.\n\n"
        "–•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö. –î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: <a href='mailto:support@example.com'>support@example.com</a>",
        parse_mode="HTML"
    )

@dp.message(lambda msg: msg.text == "/offer")
async def show_offer(msg: Message):
    await msg.answer(
        "<b>üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞</b>\n\n"
        "–ù–∞—Å—Ç–æ—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (–æ—Ñ–µ—Ä—Ç–æ–π) –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –æ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ "
        "–¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ Telegram-–±–æ—Ç–µ.\n\n"
        "<b>–£—Å–ª—É–≥–∞:</b> –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º, –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
        "<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.\n"
        "<b>–ü–æ—Ä—è–¥–æ–∫ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞:</b>\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã Telegram (Visa / Mastercard / –≠–ª–∫–∞—Ä—Ç)\n"
        "‚Ä¢ –° –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ü–µ–ø—Ç–æ–≤–∞–≤—à–∏–º –æ—Ñ–µ—Ä—Ç—É\n\n"
        "–°—Ç–æ—Ä–æ–Ω–∞–º–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è:\n"
        "‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü ‚Äî –ò–ü/–û—Å–û–û\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram, –æ—Å—É—â–µ—Å—Ç–≤–∏–≤—à–∏–π –æ–ø–ª–∞—Ç—É\n\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <a href='mailto:support@example.com'>support@example.com</a>",
        parse_mode="HTML"
    )

@dp.message(lambda msg: msg.text == "/about")
async def show_about(msg: Message):
    await msg.answer(
        "<b>üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ</b>\n\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> –ò–ü –ù–∏—à–∞–º–±–∞–µ–≤–∞ –ê–π–∂–∞–Ω –ë–µ–∫–º—É–ª–¥–æ–µ–≤–Ω–∞\n"
        "<b>–ò–ù–ù:</b> 12203198800263\n"
        "<b>–û–ö–ü–û:</b> 30505619\n"
        "<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:</b> –≥. –û—à, —É–ª. –£–∑–≥–µ–Ω—Å–∫–∞—è, 13/7\n"
        "<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +996 556 432 322\n"
        "<b>Email:</b> <a href='mailto:support@example.com'>support@example.com</a>\n\n"
        "<b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
        "–û–ê–û ¬´–û–ø–ª–∞—Ç–ë–∞–Ω–∫¬ª\n"
        "–†/—Å: 1234567890123456\n"
        "–ë–ò–ö: 123456\n\n"
        "<b>–ü–ª–∞—Ç—ë–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:</b> Visa, Mastercard, –≠–ª–∫–∞—Ä—Ç",
        parse_mode="HTML"
    )

@dp.message(lambda msg: msg.text == "/refund")
async def show_refund(msg: Message):
    await msg.answer(
        "<b>üîÅ –ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –æ–ø–ª–∞—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª—É—á–∞—è—Ö:\n"
        "‚Ä¢ –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)\n"
        "‚Ä¢ –°–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –Ω–µ —É—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤\n\n"
        "<b>–°—Ä–æ–∫ –∑–∞–ø—Ä–æ—Å–∞:</b> –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 7 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã.\n"
        "<b>–§–æ—Ä–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> –Ω–∞ —Ç—É –∂–µ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å –æ–ø–ª–∞—Ç–∞.\n"
        "<b>–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> –¥–æ 10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–Ω–∫–∞.\n\n"
        "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞: <a href='mailto:support@example.com'>support@example.com</a> —Å —É–∫–∞–∑–∞–Ω–∏–µ–º:\n"
        "‚Ä¢ –§–ò–û\n‚Ä¢ Telegram ID\n‚Ä¢ –î–∞—Ç—ã –∏ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞\n‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞",
        parse_mode="HTML"
    )

@dp.message(lambda m: m.text and m.text.startswith("/createpromo "))
async def create_promo(message: Message):
    if message.from_user.id not in ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
    
    code = message.text.split(maxsplit=1)[1].strip()
    with sqlite3.connect(PROMO_DB) as conn:
        try:
            conn.execute("INSERT INTO promo_codes (code) VALUES (?)", (code,))
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' —Å–æ–∑–¥–∞–Ω.")
        except sqlite3.IntegrityError:
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@dp.callback_query(lambda c: c.data == "open_buy_menu")
async def show_buy_options(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÜ 15 –¥–Ω–µ–π ‚Äî 500 —Å–æ–º", callback_data="buy_15")
    kb.button(text="üóì 30 –¥–Ω–µ–π ‚Äî 1000 —Å–æ–º", callback_data="buy_30")
    kb.button(text="üî• 90 –¥–Ω–µ–π ‚Äî 2500 —Å–æ–º", callback_data="buy_90")
    kb.button(text="üíé 365 –¥–Ω–µ–π ‚Äî 10 000 —Å–æ–º", callback_data="buy_365")
    kb.adjust(1)

    await callback.message.answer(
        "<b>üí≥ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º:</b>\n\n"
        "üìÜ <b>15 –¥–Ω–µ–π ‚Äî 500 —Å–æ–º</b> ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Å—Ç–∞—Ä—Ç\n"
        "üóì <b>30 –¥–Ω–µ–π ‚Äî 1000 —Å–æ–º</b> ‚Äî –Ω–∞ –º–µ—Å—è—Ü\n"
        "üî• <b>90 –¥–Ω–µ–π ‚Äî 2500 —Å–æ–º</b> ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n"
        "üíé <b>365 –¥–Ω–µ–π ‚Äî 10 000 —Å–æ–º</b> ‚Äî –≤—ã–≥–æ–¥–Ω–æ –Ω–∞ –≥–æ–¥\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ:",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def handle_buy(callback: CallbackQuery):
    plans = {
        "buy_15": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 15 –¥–Ω–µ–π", "amount": 50000, "days": 15},
        "buy_30": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", "amount": 100000, "days": 30},
        "buy_90": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 90 –¥–Ω–µ–π", "amount": 250000, "days": 90},
        "buy_365": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 365 –¥–Ω–µ–π", "amount": 1000000, "days": 365},
    }
    plan = plans.get(callback.data)

    if not plan:
        return await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.", show_alert=True)

    await callback.message.answer(
        "<b>üìå –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å:</b>\n"
        "üîê /privacy | üìÑ /offer | üîÅ /refund | üè¢ /about\n\n"
        "üí≥ –û–ø–ª–∞—á–∏–≤–∞—è, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏.",
        parse_mode="HTML"
    )

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º",
        description=plan["label"],
        provider_token=PAY_TOKEN,
        currency="KGS",
        prices=[LabeledPrice(label=plan["label"], amount=plan["amount"])],
        payload=f"sub:{plan['days']}"
    )
    await callback.answer()


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
@dp.pre_checkout_query(lambda q: True)
async def checkout_handler(query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(query.id, ok=True)

# ‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
@dp.message(lambda m: m.successful_payment is not None)
async def successful_payment(message: Message):
    days = int(message.successful_payment.invoice_payload.split(":")[1])
    save_user_subscription(message.from_user.id, message.from_user.username or "", days)
    end = get_user_subscription_end(message.from_user.id)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
                [KeyboardButton(text="üõç Amazon ü¶Ö"), KeyboardButton(text="üëó Shein ‚ú®")],
                [KeyboardButton(text="üì¶ 1688 üêâ"), KeyboardButton(text="üìå Pinterest üí°")],
                [KeyboardButton(text="üîç Wordstat üìä")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–æ <b>{end.strftime('%Y-%m-%d %H:%M:%S')}</b>\n\n"
        "–í—ã–±–∏—Ä–∞–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–∏–∂–µ üëá",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    
# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
@dp.message(lambda msg: msg.text == "/start")
async def start(message: Message):
    if is_premium_active(message.from_user.id):
        text = (
            "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–º—ã–µ üî• —Ç—Ä–µ–Ω–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"
        )
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üõç Amazon ü¶Ö"), KeyboardButton(text="üëó Shein ‚ú®")],
                [KeyboardButton(text="üì¶ 1688 üêâ"), KeyboardButton(text="üìå Pinterest üí°")],
                [KeyboardButton(text="üîç Wordstat üìä")]
            ],
            resize_keyboard=True
        )
        await message.answer(text, parse_mode="HTML", reply_markup=kb)
    else:
        text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç—Ä–µ–Ω–¥—ã —Å —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:\n\n"
            "üõç <b>Amazon</b> ‚Äî —Ç–æ–≤–∞—Ä—ã –∏–∑ –°–®–ê\n"
            "üëó <b>Shein</b> ‚Äî —Ç—Ä–µ–Ω–¥—ã –º–æ–¥—ã\n"
            "üì¶ <b>1688</b> ‚Äî –æ–ø—Ç –∏–∑ –ö–∏—Ç–∞—è\n"
            "üìå <b>Pinterest</b> ‚Äî –∏–¥–µ–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n\n"
            "üîì –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ üëá"
        )
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="open_buy_menu")
        kb.button(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
        await message.answer(text, parse_mode="HTML", reply_markup=kb.as_markup())

    
@dp.message(lambda msg: msg.text == "/status")
async def status(message: Message):
    end = get_user_subscription_end(message.from_user.id)

    if end and end > datetime.now():
        await message.answer(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
            f"üîê –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–æ: <u>{end.strftime('%Y-%m-%d %H:%M:%S')}</u>\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏ üíõ",
            parse_mode="HTML"
        )
    else:
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="open_buy_menu")
        kb.button(text="üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")

        await message.answer(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ üëá",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )

# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä ===
def premium_required(handler):
    @wraps(handler)
    async def wrapper(message: Message, *args, **kwargs):
        if not is_premium_active(message.from_user.id):
            kb = InlineKeyboardBuilder()
            kb.button(text="üöÄ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="open_buy_menu")
            kb.button(text="üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")

            return await message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <u>–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</u> –∏–ª–∏ <u>–≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥</u> üéÅ\n\n"
                "üëá –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )
        return await handler(message, *args, **kwargs)
    return wrapper

def filter_unseen_products(user_id: int, products: list[dict]) -> list[dict]:
    return products  # —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ ===
# def filter_unseen_products(user_id: int, products: list[dict]) -> list[dict]:
#     result = []
#     week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
#     with sqlite3.connect(SEEN_PRODUCTS_DB) as conn:
#         cur = conn.cursor()
#         for p in products:
#             if "product_link" not in p:
#                 continue
#             cur.execute("""
#                 SELECT 1 FROM seen_products 
#                 WHERE user_id = ? AND product_link = ? AND timestamp > ?
#             """, (user_id, p["product_link"], week_ago))
#             if not cur.fetchone():
#                 result.append(p)
#                 cur.execute("""
#                     INSERT OR REPLACE INTO seen_products (user_id, product_link, timestamp)
#                     VALUES (?, ?, CURRENT_TIMESTAMP)
#                 """, (user_id, p["product_link"]))
#         conn.commit()
#     return result

async def send_trends(user_id: int, trends: list[dict], chat_id: int):
    trends = filter_unseen_products(user_id, trends)
    if not trends:
        return await bot.send_message(chat_id, "üòï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    for item in trends:
        caption = f"<b>{item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\nüí∞ {item.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n<a href='{item.get('product_link', '#')}'>üõç –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        await bot.send_photo(chat_id, item.get("image_url", ""), caption=caption, parse_mode="HTML")

# === –•–µ–Ω–¥–ª–µ—Ä—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º ===
@dp.message(lambda msg: msg.text == "üõç Amazon ü¶Ö")
@premium_required
async def amazon_handler(msg: Message):
    await msg.answer("üõç <b>–°–æ–±–∏—Ä–∞–µ–º –≥–æ—Ä—è—á–∏–µ —Ç—Ä–µ–Ω–¥—ã Amazon...</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ üîÑ", parse_mode="HTML")
    trends = await get_amazon_trends()
    await send_trends(msg.from_user.id, trends, msg.chat.id)


@dp.message(lambda msg: msg.text == "üëó Shein ‚ú®")
@premium_required
async def shein_handler(msg: Message):
    await msg.answer("üíÉ <b>–ò—â–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã Shein...</b>\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚ú®", parse_mode="HTML")
    await send_trends(msg.from_user.id, get_shein_trends(), msg.chat.id)


@dp.message(lambda msg: msg.text == "üìå Pinterest üí°")
@premium_required
async def pinterest_handler(msg: Message):
    await msg.answer("üìå <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–∑ Pinterest...</b>\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üß†", parse_mode="HTML")
    await send_trends(msg.from_user.id, await get_pinterest_trends(), msg.chat.id)


@dp.message(lambda msg: msg.text == "üì¶ 1688 üêâ")
@premium_required
async def choose_1688(msg: Message):
    await msg.answer("üì¶ <b>–í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–ø–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ 1688...</b>", parse_mode="HTML")
    cats = await get_1688_categories()
    kb = InlineKeyboardBuilder()
    for original, translated in cats.items():
        kb.button(text=translated, callback_data=f"cat1688:{original}")
    kb.adjust(2)
    await msg.answer("üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", parse_mode="HTML", reply_markup=kb.as_markup())


@dp.callback_query(lambda c: c.data.startswith("cat1688:"))
async def category_1688(call: CallbackQuery):
    await call.answer()
    category_key = call.data.split(":", 1)[1]
    await call.message.answer("üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1688...")
    trends = await get_1688_trends_by_category(category_key)
    await send_trends(call.from_user.id, trends, call.message.chat.id)

@dp.message(lambda msg: msg.text == "üîç Wordstat üìä")
async def wordstat_start(msg: Message, state: FSMContext):
    await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É:")
    await state.set_state(WordstatFSM.waiting_for_phrase)

@dp.message(WordstatFSM.waiting_for_phrase)
async def wordstat_handler(msg: Message, state: FSMContext):
    if not check_wordstat_limit(msg.from_user.id):
        await msg.answer("‚ö†Ô∏è –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (5). –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
        await state.clear()
        return

    await msg.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Wordstat...")
    try:
        result = await get_wordstat_count(msg.text.strip())  # ‚Üê –≤–æ—Ç –∑–¥–µ—Å—å await
        await msg.answer(result, parse_mode="HTML")
    except Exception as e:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print(f"[ERROR] Wordstat: {e}")

    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    init_db()
    init_seen_products_db()
    init_promo_db()
    init_wordstat_limit_db()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/status", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
    ])

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    asyncio.create_task(remind_expiring_subscriptions())

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("üö´ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
