import asyncio
import sqlite3
from datetime import datetime, timedelta
from functools import wraps

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    Message, CallbackQuery, LabeledPrice, PreCheckoutQuery,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, PAY_TOKEN
from trends.amazon import get_amazon_trends
from trends.shein import get_shein_trends
from trends.trend1688 import get_1688_trends
from trends.pinterest import get_pinterest_trends

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

DB_NAME = "denushki.db"


# ========== –ë–ê–ó–ê –ü–û–î–ü–ò–°–û–ö ==========
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            end_date TEXT
        )
        """)
        conn.commit()


def save_user_subscription(user_id: int, username: str, days: int):
    current_end = get_user_subscription_end(user_id)
    now = datetime.now()
    base_date = current_end if current_end and current_end > now else now
    end_date = (base_date + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO subscriptions (user_id, username, end_date)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET end_date = excluded.end_date
        """, (user_id, username, end_date))
        conn.commit()


def get_user_subscription_end(user_id: int):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result:
            return datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        return None


def is_premium_active(user_id: int) -> bool:
    end = get_user_subscription_end(user_id)
    return bool(end and end > datetime.now())


# ========== –ü–†–ï–ú–ò–£–ú –ó–ê–©–ò–¢–ê ==========
def premium_required(handler):
    @wraps(handler)
    async def wrapper(message: Message, *args, **kwargs):
        if not is_premium_active(message.from_user.id):
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üöÄ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º", callback_data="open_buy_menu")
            keyboard.adjust(1)
            await message.answer(
                "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º –ø—Ä–∏–±—ã–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º üí•",
                reply_markup=keyboard.as_markup()
            )
            return
        return await handler(message, *args, **kwargs)
    return wrapper


# ========== –ö–õ–ê–í–ò–ê–¢–£–†–ê –¢–†–ï–ù–î–û–í ==========
trend_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="Amazon"), KeyboardButton(text="Shein")],
    [KeyboardButton(text="1688"), KeyboardButton(text="Pinterest")]
], resize_keyboard=True)


# ========== –ö–û–ú–ê–ù–î–ê /start ==========
@dp.message(lambda msg: msg.text == "/start")
async def start(message: Message):
    user_id = message.from_user.id

    if is_premium_active(user_id):
        await message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n\n–í—ã–±–∏—Ä–∞–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∏–∂–µ –∏ –ª–æ–≤–∏ —Ç—Ä–µ–Ω–¥—ã –ø–µ—Ä–≤—ã–º:",
            reply_markup=trend_keyboard
        )
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="open_buy_menu")
        keyboard.adjust(1)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–∞–º—ã–µ üî• —Ç–æ–≤–∞—Ä—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—Å—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫:\n‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º\n‚Ä¢ –ò–Ω—Å–∞–π—Ç–∞–º —Å Amazon, Shein, 1688 –∏ Pinterest\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–º –∏–¥–µ—è–º –¥–ª—è –ø—Ä–æ–¥–∞–∂\n–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!",
            reply_markup=keyboard.as_markup()
        )


# ========== –ü–û–ö–£–ü–ö–ê –ü–û–î–ü–ò–°–ö–ò ==========
@dp.callback_query(lambda c: c.data == "open_buy_menu")
async def show_buy_options(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîì –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø ‚Äî 30 –¥–Ω–µ–π –∑–∞ 100 ‚ÇΩ", callback_data="buy_30")
    keyboard.button(text="üî• –û–ø—Ç–∏–º—É–º ‚Äî 3 –º–µ—Å—è—Ü–∞ –∑–∞ 250 ‚ÇΩ", callback_data="buy_90")
    keyboard.button(text="üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π ‚Äî 6 –º–µ—Å—è—Ü–µ–≤ –∑–∞ 450 ‚ÇΩ", callback_data="buy_180")
    keyboard.button(text="üíé –ë–µ–∑–ª–∏–º–∏—Ç ‚Äî 12 –º–µ—Å—è—Ü–µ–≤ –∑–∞ 800 ‚ÇΩ", callback_data="buy_365")
    keyboard.adjust(1)

    await callback.message.answer(
        "üíº –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def process_payment(callback: CallbackQuery):
    periods = {
        "buy_30": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", "amount": 10000, "days": 30},
        "buy_90": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞", "amount": 25000, "days": 90},
        "buy_180": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", "amount": 45000, "days": 180},
        "buy_365": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥", "amount": 80000, "days": 365},
    }

    plan = periods.get(callback.data)
    if not plan:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return

    price = [LabeledPrice(label=plan["label"], amount=plan["amount"])]
    payload = f"sub:{plan['days']}"

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º",
        description=plan["label"],
        provider_token=PAY_TOKEN,
        currency="RUB",
        prices=price,
        start_parameter="premium_plan",
        payload=payload,
        need_email=False,
        is_flexible=False
    )
    await callback.answer()


# ========== –û–ü–õ–ê–¢–ê ==========
@dp.pre_checkout_query(lambda q: True)
async def checkout(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(lambda msg: msg.successful_payment is not None)
async def payment_done(message: Message):
    days = int(message.successful_payment.invoice_payload.split(":")[1])
    username = message.from_user.username or ""
    save_user_subscription(message.from_user.id, username, days)
    end = get_user_subscription_end(message.from_user.id)
    await message.answer(f"üéâ –ì–æ—Ç–æ–≤–æ! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–¥–∞–º.\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{end.strftime('%Y-%m-%d %H:%M:%S')}</b>", parse_mode="HTML")


# ========== –°–¢–ê–¢–£–° ==========
@dp.message(lambda msg: msg.text == "/status")
async def status(message: Message):
    end = get_user_subscription_end(message.from_user.id)
    if end and end > datetime.now():
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="open_buy_menu")
        keyboard.adjust(1)
        await message.answer(
            f"‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í—ã —Å –Ω–∞–º–∏ –¥–æ: <b>{end.strftime('%Y-%m-%d %H:%M:%S')}</b>",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    else:
        await message.answer("üòî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî –æ—Ñ–æ—Ä–º–∏ –¥–æ—Å—Ç—É–ø –∏ –±—É–¥—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤! üî•")


# ========== –¢–†–ï–ù–î–´ ==========
@dp.message(lambda msg: msg.text == "Amazon")
@premium_required
async def trends_amazon(message: Message):
    await message.answer("üõí –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Amazon ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –ª—É—á—à–µ –≤—Å–µ–≥–æ! üöÄ")
    trends = get_amazon_trends()
    if not trends:
        return await message.answer("üòì –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –º—ã —É–∂–µ —á–∏–Ω–∏–º! üîß")
    for item in trends:
        caption = f"üî• <b>{item['title']}</b>\n<a href='{item['product_link']}'>üõçÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–≤–∞—Ä–µ</a>"
        await bot.send_photo(message.chat.id, item['image_url'], caption=caption, parse_mode='HTML')


@dp.message(lambda msg: msg.text == "Shein")
@premium_required
async def trends_shein(message: Message):
    await message.answer("üíÉ –õ–æ–≤–∏–º —Ç—Ä–µ–Ω–¥—ã –Ω–∞ Shein ‚Äî —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞—é—Ç –º–∏–ª–ª–∏–æ–Ω—ã! üåü")
    trends = get_shein_trends()
    if not trends:
        return await message.answer("üòì –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –º—ã —É–∂–µ —á–∏–Ω–∏–º! üîß")
    for item in trends:
        caption = f"‚ú® <b>{item['title']}</b>\nüí∞ –¶–µ–Ω–∞: {item['price']}\n<a href='{item['product_link']}'>üõçÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä</a>"
        await bot.send_photo(message.chat.id, item['image_url'], caption=caption, parse_mode='HTML')


@dp.message(lambda msg: msg.text == "1688")
@premium_required
async def trends_1688(message: Message):
    await message.answer("üì¶ –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–æ–≤—ã–µ —Ö–∏—Ç—ã —Å 1688 ‚Äî –¥–ª—è —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫! üíº")
    trends = await get_1688_trends()
    if not trends:
        return await message.answer("üòì –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –º—ã —É–∂–µ —á–∏–Ω–∏–º! üîß")
    for item in trends:
        caption = f"üìà <b>{item['title']}</b>\nüí∞ –¶–µ–Ω–∞: {item['price']}\nüè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: {item['company']}\n<a href='{item['product_link']}'>üì¶ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
        await bot.send_photo(message.chat.id, item['image_url'], caption=caption, parse_mode='HTML')


@dp.message(lambda msg: msg.text == "Pinterest")
@premium_required
async def trends_pinterest(message: Message):
    await message.answer("üìå –õ–æ–≤–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ Pinterest ‚Äî —Å–∞–º—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∑–¥–µ—Å—å! üí°")
    trends = get_pinterest_trends()
    if not trends:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã.")
    for item in trends:
        caption = f"üí° <b>{item['title']}</b>\n<a href='{item['product_link']}'>üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–¥–µ—é</a>"
        await bot.send_photo(message.chat.id, item['image_url'], caption=caption, parse_mode='HTML')


# ========== –ó–ê–ü–£–°–ö ==========
async def main():
    init_db()
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/status", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
    ])
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
